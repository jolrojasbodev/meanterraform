{
  "variables": {
    "default_ssh_username": "ubuntu",
    "app_version": "1.0.0",
    "default_instance_type": "t2.micro",
    "aws_region": "us-east-2",
    "aws_access_key": "AKIAVDSU4RBGYKKQ4IE7",
    "aws_secret_key": "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",
    "default_aws_source_ami": "ami-0c3b809fcf2445b6a",
    "webapp_security_group_id": "sg-0ffc09b6668901f1a",
    "mongo_instance_tag_name": "MongoDB-Instance"
  },
  "builders": [
    {
      "type": "amazon-ebs",
      "access_key": "{{user `aws_access_key`}}",
      "secret_key": "{{user `aws_secret_key`}}",
      "ami_name": "awspacker-ean-{{timestamp}}",
      "associate_public_ip_address": true,
      "instance_type": "{{user `default_instance_type`}}",
      "communicator": "ssh",
      "region": "{{user `aws_region`}}",
      "source_ami": "{{user `default_aws_source_ami`}}",
      "ssh_username": "{{user `default_ssh_username`}}",
      "ssh_pty": true,
      "tags": {
        "App_Version": "{{user `app_version`}}",
        "Name": "Web App Base AMI EAN",
        "OS_Version": "Ubuntu 20.04",
        "Release": "Latest"
      }
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "echo '### Instalando dependencias basicas (curl, gnupg, unzip) ###'",
        "sudo apt-get update -y",
        "sudo apt-get install -y curl gnupg unzip || true"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo '### Instalando Node.js 20.x y npm global package: pm2 ###'",
        "curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -",
        "sudo apt-get install -y nodejs",
        "sudo npm install -g pm2"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo '### Instalando Nginx ###'",
        "sudo apt-get install -y nginx"
      ]
    },
    {
      "type": "file",
      "source": "express-app.js",
      "destination": "/tmp/express-app.js"
    },
    {
      "type": "file",
      "source": "nginx.conf",
      "destination": "/tmp/nginx.conf"
    },
    {
      "type": "file",
      "source": "angularapp-dist.zip",
      "destination": "/tmp/angularapp-dist.zip"
    },
    {
      "type": "shell",
      "inline": [
        "echo '### Configurando Nginx.conf desde /tmp/ ###'",
        "sudo mv /tmp/nginx.conf /etc/nginx/sites-available/default",
        "sudo chown root:root /etc/nginx/sites-available/default"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo '### Moviendo y configurando Backend (Express.js) desde /tmp/ ###'",
        "sudo mkdir -p /opt/app",
        "sudo mv /tmp/express-app.js /opt/app/express-app.js",
        "cd /opt/app",
        "sudo npm install express mongoose cors",
        "",
        "echo '### Configurando IP PRIVADA de MongoDB en express-app.js ###'",
        "",
        "sudo env PATH=$PATH:/usr/bin pm2 start express-app.js --name backend",
        "sudo env PATH=$PATH:/usr/bin pm2 save",
        "sudo env PATH=$PATH:/usr/bin pm2 startup"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "echo '### Descomprimiendo la aplicacion Angular pre-construida desde /tmp/ ###'",
        "sudo mkdir -p /var/www/html/angular-app",
        "if command -v unzip >/dev/null 2>&1; then",
        "  sudo unzip /tmp/angularapp-dist.zip -d /var/www/html/angular-app",
        "else",
        "  echo 'Error: unzip no esta instalado. No se puede descomprimir angularapp-dist.zip.'",
        "  exit 1",
        "fi",
        "sudo rm -f /tmp/angularapp-dist.zip",
        "sudo chown -R www-data:www-data /var/www/html/angular-app",
        "",
        "echo '### Configurando Nginx - Parte 2: Enlaces y reinicio ###'",
        "sudo rm -f /etc/nginx/sites-enabled/default",
        "sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default",
        "sudo nginx -t",
        "sudo systemctl restart nginx",
        "sudo systemctl enable nginx"
      ]
    }
  ]
}